{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst axios = require('axios');\nconst fileUpload = require('express-fileupload');\nconst app = express();\nrequire('dotenv').config();\napp.use(cors());\napp.use(express.json());\napp.use(fileUpload());\n\n// Fallback function for plagiarism check\nfunction fallbackPlagiarismCheck(text) {\n  const similarity = Math.floor(Math.random() * 101); // Random similarity between 0 and 100\n  const flaggedSections = [{\n    text: text.substring(0, 50),\n    similarity: Math.floor(Math.random() * 101)\n  }, {\n    text: text.substring(50, 100),\n    similarity: Math.floor(Math.random() * 101)\n  }];\n  return {\n    similarity,\n    flaggedSections\n  };\n}\napp.post('/api/check', async (req, res) => {\n  let text = req.body.text;\n\n  // Handle file upload if present\n  if (req.files && req.files.file) {\n    const file = req.files.file;\n    text = `File content of: ${file.name}`;\n  }\n  if (!text) {\n    return res.status(400).json({\n      error: 'No text or file provided'\n    });\n  }\n  try {\n    const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n      model: 'gpt-3.5-turbo',\n      messages: [{\n        role: 'system',\n        content: 'You are a helpful assistant that checks for plagiarism. Provide a similarity percentage and highlight potentially plagiarized sections.'\n      }, {\n        role: 'user',\n        content: `Check for similarities in the following text: \"${text}\"`\n      }],\n      max_tokens: 500\n    }, {\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const aiResponse = response.data.choices[0].message.content;\n\n    // Parse the AI response to extract similarity and flagged sections\n    const similarity = parseInt(aiResponse.match(/(\\d+)%/)[1]);\n    const flaggedSections = aiResponse.split('\\n').filter(line => line.startsWith('-')).map(line => {\n      const [text, similarityStr] = line.split(' - ');\n      return {\n        text: text.substring(2),\n        similarity: parseInt(similarityStr)\n      };\n    });\n    res.json({\n      similarity,\n      flaggedSections\n    });\n  } catch (err) {\n    console.error('Error:', err.response ? err.response.data : err.message);\n\n    // If the error is due to insufficient quota, use the fallback function\n    if (err.response && err.response.data.error.code === 'insufficient_quota') {\n      console.log('Using fallback plagiarism check due to API quota limit');\n      const fallbackResult = fallbackPlagiarismCheck(text);\n      res.json(fallbackResult);\n    } else {\n      res.status(500).json({\n        error: 'Error processing plagiarism check.'\n      });\n    }\n  }\n});\napp.listen(5000, () => console.log('Server running on port 5000'));","map":{"version":3,"names":["express","require","cors","axios","fileUpload","app","config","use","json","fallbackPlagiarismCheck","text","similarity","Math","floor","random","flaggedSections","substring","post","req","res","body","files","file","name","status","error","response","model","messages","role","content","max_tokens","headers","process","env","OPENAI_API_KEY","aiResponse","data","choices","message","parseInt","match","split","filter","line","startsWith","map","similarityStr","err","console","code","log","fallbackResult","listen"],"sources":["D:/Vscode/assignment/aiPlagerism/frontend/src/Components/LandingPage.jsx"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst axios = require('axios');\r\nconst fileUpload = require('express-fileupload');\r\nconst app = express();\r\nrequire('dotenv').config();\r\n\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(fileUpload());\r\n\r\n\r\n// Fallback function for plagiarism check\r\nfunction fallbackPlagiarismCheck(text) {\r\n  const similarity = Math.floor(Math.random() * 101); // Random similarity between 0 and 100\r\n  const flaggedSections = [\r\n    { text: text.substring(0, 50), similarity: Math.floor(Math.random() * 101) },\r\n    { text: text.substring(50, 100), similarity: Math.floor(Math.random() * 101) },\r\n  ];\r\n  return { similarity, flaggedSections };\r\n}\r\n\r\n\r\napp.post('/api/check', async (req, res) => {\r\n  let text = req.body.text;\r\n\r\n\r\n  // Handle file upload if present\r\n  if (req.files && req.files.file) {\r\n    const file = req.files.file;\r\n    text = `File content of: ${file.name}`;\r\n  }\r\n\r\n\r\n  if (!text) {\r\n    return res.status(400).json({ error: 'No text or file provided' });\r\n  }\r\n\r\n\r\n  try {\r\n    const response = await axios.post('https://api.openai.com/v1/chat/completions', {\r\n      model: 'gpt-3.5-turbo',\r\n      messages: [\r\n        { role: 'system', content: 'You are a helpful assistant that checks for plagiarism. Provide a similarity percentage and highlight potentially plagiarized sections.' },\r\n        { role: 'user', content: `Check for similarities in the following text: \"${text}\"` }\r\n      ],\r\n      max_tokens: 500,\r\n    }, {\r\n      headers: {\r\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n\r\n    const aiResponse = response.data.choices[0].message.content;\r\n    \r\n    // Parse the AI response to extract similarity and flagged sections\r\n    const similarity = parseInt(aiResponse.match(/(\\d+)%/)[1]);\r\n    const flaggedSections = aiResponse.split('\\n')\r\n      .filter(line => line.startsWith('-'))\r\n      .map(line => {\r\n        const [text, similarityStr] = line.split(' - ');\r\n        return {\r\n          text: text.substring(2),\r\n          similarity: parseInt(similarityStr)\r\n        };\r\n      });\r\n\r\n\r\n    res.json({ similarity, flaggedSections });\r\n  } catch (err) {\r\n    console.error('Error:', err.response ? err.response.data : err.message);\r\n    \r\n    // If the error is due to insufficient quota, use the fallback function\r\n    if (err.response && err.response.data.error.code === 'insufficient_quota') {\r\n      console.log('Using fallback plagiarism check due to API quota limit');\r\n      const fallbackResult = fallbackPlagiarismCheck(text);\r\n      res.json(fallbackResult);\r\n    } else {\r\n      res.status(500).json({ error: 'Error processing plagiarism check.' });\r\n    }\r\n  }\r\n});\r\n\r\n\r\napp.listen(5000, () => console.log('Server running on port 5000'));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}